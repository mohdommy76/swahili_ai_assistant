from fastapi import FastAPI
from pydantic import BaseModel
from transformers import AutoModelForSeq2SeqLM, AutoTokenizer

# Load Translation Model (English ‚Üî Swahili)
model_name = "facebook/nllb-200-distilled-600M"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSeq2SeqLM.from_pretrained(model_name)

# Initialize FastAPI
app = FastAPI()

# Request Schema
class TranslationRequest(BaseModel):
    text: str
    src_lang: str = "eng_Latn"
    tgt_lang: str = "swh_Latn"

# Translation Function
def translate_text(text, src_lang, tgt_lang):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True)
    translated_tokens = model.generate(**inputs, forced_bos_token_id=tokenizer.lang_code_to_id[tgt_lang])
    return tokenizer.batch_decode(translated_tokens, skip_special_tokens=True)[0]

# API Endpoint
@app.post("/translate/")
def translate(request: TranslationRequest):
    translation = translate_text(request.text, request.src_lang, request.tgt_lang)
    return {"translated_text": translation}
import streamlit as st
import requests

# App Title
st.title("Swahili AI Research Assistant üåçüìö")

# User Input
text_input = st.text_area("Enter English Research Text:")
if st.button("Translate to Swahili"):
    if text_input:
        response = requests.post("http://127.0.0.1:8000/translate/", json={"text": text_input})
        translated_text = response.json().get("translated_text", "Translation failed.")
        st.subheader("Swahili Translation:")
        st.write(translated_text)
    else:
        st.warning("Please enter some text first.")
fastapi
uvicorn
streamlit
transformers
torch
sentencepiece
requests
git init
git add .
git commit -m "Initial commit"
git remote add origin <YOUR_GITHUB_REPO_URL>
git push -u origin master
